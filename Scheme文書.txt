                Scheme文書              (2022-07-09)
                ----------


以前から、n未満のすべての素数を求めるプログラムで、Lisp系の言語の性能測定をしている。
言語はScheme及びCommon Lispを対象にしていて、プログラムは以下のような感じ。


primesq2.scm
-----
;;;    primesq2 (R6RS)

(import (rnrs) (rnrs mutable-pairs))

;; queue
(define (make-queue)
  (let ((queue (cons '() '())))
    (set-car! queue queue)
    queue))

(define (en-queue! queue x)
  (let ((q (cons x '())))
    (set-cdr! (car queue) q)
    (set-car! queue q)
    queue))

(define (de-queue! queue)
  (let* ((lst (cdr queue))
         (val (car lst))
         (rest (cdr lst)))
    (set-cdr! queue rest)
    (if (null? rest)
	(set-car! queue queue))
    val))

(define (get-list queue) (cdr queue))

;; primes
(define (is-prime p-lst x)
  (if (null? p-lst) #t
      (let ((p (car p-lst)))
	(cond ((> (* p p) x) #t)
	      ((= 0 (mod x p)) #f)
	      (else (is-prime (cdr p-lst) x))))))

(define (primes queue x xmax)
  (cond ((> x xmax)
         (cons 2 (get-list queue)))
        ((is-prime (get-list queue) x)
         (primes (en-queue! queue x) (+ x 2) xmax))
        (else
         (primes queue (+ x 2) xmax))))

;; main
;(primes (make-queue) 3 100000000)
(display (length (primes (make-queue) 3 1000000000)))
-----


primesv2.scm
-----
;; for Ikarus
(import (ikarus))

;; for Larceny
;(import (larceny r7r6))

;(define plen 5761455)  ; 2 .. 100000000 OK
(define plen 50847534)  ; 2 .. 1000000000 OK
(define pidx 1)
(define pi 1)
(define px 3)
(define pvect (make-vector plen 0))
(define ppvect (make-vector plen 0))

(define (primeset)
  (if (= pidx plen) #f
    (begin (vector-set! pvect pidx px)
           (vector-set! ppvect pidx (* px px))
           (set! pidx (+ pidx 1)))))

(define (is-prime)
  (set! pi 1)
  (do ((rtn 0))
      ((not (eqv? rtn 0)) rtn)
    (cond ((= (vector-ref pvect pi) 0) (set! rtn #t))
          ((> (vector-ref ppvect pi) px) (set! rtn #t))
          ((= (modulo px (vector-ref pvect pi)) 0) (set! rtn #f))
          (else (set! pi (+ pi 1))))))

(define (primes)
  (do ((rtn 0))
      ((not (eqv? rtn 0)) rtn)
    (if (is-prime)
          (if (primeset) #t
              (begin (vector-set! pvect 0 2)
                     (set! rtn pvect))))
    (set! px (+ px 2))))

(primes)
-----


当初予想としては、当然Common Lispの方が優れているはずと思っていた。
しかし実際に測定してみると、Schemeのいくつかの処理系の方がCommon Lispの処理系よりも優れていることが判明。
その処理系とはIkarusおよびChez Schemeで、SBCLとの比較で、速度的に勝っている。
扱うデータが大きくないとあまり意味がないので、処理系は64bit実装、素数の範囲は2～1000000000を想定している。
この条件下で、上記の様なconsセルでキューを実装して用いるプログラムでも、
ベクターを用いるプログラムでも、どちらでもIkarus及びChez Schemeの方がSBCLよりも優れている。
およその処理時間は、i5のマシン上でベクターを用いるプログラムの場合で、
Ikarus及びChez Schemeが約50分、SBCLが約70分であり、明らかに差がある。
それだけではなく、SBCLはconsセルでキューを実装して用いるプログラムでは、途中でHeap exhaustedが起きて、
なんと1000000000まで到達出来ない。

この結果を見て、Lisp系言語に対する自分の認識が揺らいで来た。
Schemeは実験的な言語であり、実用目的なら断然Common Lispだと思っていたのだが、
上記の結果を見ると、既にSchemeはCommon Lispを超えたのではないか？と思える。
そもそも仕様的にはSchemeの方が優れているのだし、その上性能も優れているのなら、もう迷う理由もない。

ここは一度、Scheme一本に絞って勉強してみたい気がして来た。

処理系としては、Windowsもサポートしていて（製品として）ドキュメントなども整っているらしいChez Schemeと、
Linux上で良い性能を出しているIkarusを想定。

IkarusもChez SchemeもR6RS規格に準じた処理系なので、規格的には最新のR7RS規格ではなく、
一つ古い世代のR6RS規格を学ぶことになる。

